fs::dir_tree()
## Fill the DESCRIPTION ----
## Add meta data about your application
golem::fill_desc(
pkg_name = "SeaClone", # The Name of the package containing the App
pkg_title = "PKG_TITLE", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "AUTHOR_FIRST", # Your First Name
author_last_name = "AUTHOR_LAST", # Your Last Name
author_email = "AUTHOR@MAIL.COM", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license( name = "Golem User" )  # You can set another license here
install.packages("git2r")
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license( name = "Golem User" )  # You can set another license here
usethis::use_readme_rmd( open = FALSE )
usethis::use_code_of_conduct()
usethis::use_lifecycle_badge( "Experimental" )
usethis::use_news_md( open = FALSE )
## Use git ----
usethis::use_git()
golem
golem::document_and_reload()
SeaCloneR::run_app()
SeaCloneR::run_app()
golem::document_and_reload()
usethis::use_git()
golem::document_and_reload(); SeaCloneR::run_app()
library(shiny)
ui <- fluidPage(
gridPanel(
areas = c("area-1 area-1", "area-2 area-3"),
rows = c"1fr 2fr",
columns = c"2fr 100px",
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
gridPanel(
areas = c("area-1 area-1", "area-2 area-3"),
rows = c("1fr 2fr"),
columns = c("2fr 100px"),
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
shiny.grid::gridPanel(
areas = c("area-1 area-1", "area-2 area-3"),
rows = c("1fr 2fr"),
columns = c("2fr 100px"),
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shiny.grid::gridPanel
golem::document_and_reload(); SeaCloneR::run_app()
library(shiny)
ui <- fluidPage(
gridPage(
title = "A grid page",
areas = c("area-1 area-1", "area-2 area-3"),
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
shiny.grid::gridPage(
title = "A grid page",
areas = c("area-1 area-1", "area-2 area-3"),
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(golem)
library(shiny.grid)
library(shiny)
ui <- fluidPage(
shiny.grid::gridPage(
title = "A grid page",
areas = c("area-1 area-1", "area-2 area-3"),
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
shiny.grid::gridPage(
title = "A grid page",
areas = c("area-1 area-1", "area-2 area-3"),
div(class = "area-1"),
div(class = "area-2"),
div(class = "area-3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
?shinyWidgets::setBackgroundImage
?shinyWidgets::setBackgroundImage
golem::document_and_reload(); SeaCloneR::run_app()
add_resource_path
?addResourcePath
app_sys
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Add a shiny app background image"),
setBackgroundImage(
src = "https://www.fillmurray.com/1920/1080"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Add a shiny app background image"),
setBackgroundImage(
src = "https://www.fillmurray.com/1920/1080"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
}
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
tags$img(
system.file("app/www/media/map.png", package = "SeaCloneR")
)
tags$img(
src=system.file("app/www/media/map.png", package = "SeaCloneR")
)
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
base64enc::dataURI("inst/media/map.png")
base64enc::dataURI(file="inst/media/map.png", mime = "image/png")
?src
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
tags$img(
src = "map.png")
"inst/media/map.png"
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
runApp('R')
runApp('R')
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
shinyWidgets::setBackgroundImage()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
runApp('R')
golem::document_and_reload(); SeaCloneR::run_app()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(shiny)
library(shiny.grid)
ui <- gridPage(
title = "Grid Panels example",
rows = list(
default = "1fr 2fr 3fr",
xs = "1fr 1fr 1fr"
),
areas = list(
default = c(
"area-1 area-1 area-1",
"area-2 area-3 area-3",
"area-2 area-3 area-3"
),
xs = c(
"area-1",
"area-2",
"area-3"
)
),
gap = list(
default = "0",
md = "20px",
xs = "5px"
),
div(
class = "area-1",
style = "background: #FFD369; border: 5px solid #d48000;",
tags$label("A simple div")
),
gridPanel(
class = "area-2",
style = "background: #E8B25F; border: 5px solid #d48000;",
tags$label("A simple grid panel")
),
gridPanel(
class = "area-3",
rows = "1fr 1fr 5fr",
columns = "1fr 1fr 5fr",
style = "background: #E8B21F;  border: 5px solid #d48000;",
areas = c(
"subarea-1 subarea-1 subarea-3",
"subarea-1 subarea-1 subarea-3",
"subarea-2 subarea-2 subarea-3"
),
div(
class = "subarea-1",
style = "background: #cacaca; border: 5px solid gray;",
tags$label("A grid panel with a inner grid")
),
`subarea-2` = div(
style = "background: #a0a0a0; border: 5px solid gray;",
tags$label("I dont have the right area class, but im called as a named argument")
),
gridPanel(
class = "subarea-3",
style = "background: #4c4c4c; border: 5px solid gray;",
areas = list(
default = c(
"subsubarea-1",
"subsubarea-2",
"subsubarea-3"
),
xs = c(
"subsubarea-1 subsubarea-1",
"subsubarea-2 subsubarea-3"
)
),
gap = list(
default = "0",
xs = "5%"
),
div(
class = "subsubarea-1",
style = "background: #71A5FF; border: 5px solid blue;",
tags$label("We need to go deeper")
),
div(
class = "subsubarea-2",
style = "background: #72E7E8; border: 5px solid blue;"
),
gridPanel(
class = "subsubarea-3",
style = "background: #8AFFB1; border: 5px solid blue;",
rows = "repeat(4, 1fr)",
div(style = "background: #8AFF91; border: 3px solid green;"),
div(style = "background: #8AFF81; border: 3px solid green;"),
div(style = "background: #8AFF71; border: 3px solid green;"),
gridPanel(
style = "background: #8AFF61; border: 3px solid green;",
columns = "1fr 1fr 1fr",
div(style = "background: #8A1F91; border: 2px solid yellow;"),
div(style = "background: #8A2F81; border: 2px solid yellow;"),
div(style = "background: #8A3F71; border: 2px solid yellow;")
)
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny.grid)
ui <- gridPage(
title = "Grid Panels example",
rows = list(
default = "1fr 2fr 3fr",
xs = "1fr 1fr 1fr"
),
areas = list(
default = c(
"area-1 area-1 area-1",
"area-2 area-3 area-3",
"area-2 area-3 area-3"
),
xs = c(
"area-1",
"area-2",
"area-3"
)
),
gap = list(
default = "0",
md = "20px",
xs = "5px"
),
div(
class = "area-1",
style = "background: #FFD369; border: 5px solid #d48000;",
tags$label("A simple div")
),
gridPanel(
class = "area-2",
style = "background: #E8B25F; border: 5px solid #d48000;",
tags$label("A simple grid panel")
),
gridPanel(
class = "area-3",
rows = "1fr 1fr 5fr",
columns = "1fr 1fr 5fr",
style = "background: #E8B21F;  border: 5px solid #d48000;",
areas = c(
"subarea-1 subarea-1 subarea-3",
"subarea-1 subarea-1 subarea-3",
"subarea-2 subarea-2 subarea-3"
),
div(
class = "subarea-1",
style = "background: #cacaca; border: 5px solid gray;",
tags$label("A grid panel with a inner grid")
),
`subarea-2` = div(
style = "background: #a0a0a0; border: 5px solid gray;",
tags$label("I dont have the right area class, but im called as a named argument")
),
gridPanel(
class = "subarea-3",
style = "background: #4c4c4c; border: 5px solid gray;",
areas = list(
default = c(
"subsubarea-1",
"subsubarea-2",
"subsubarea-3"
),
xs = c(
"subsubarea-1 subsubarea-1",
"subsubarea-2 subsubarea-3"
)
),
gap = list(
default = "0",
xs = "5%"
),
div(
class = "subsubarea-1",
style = "background: #71A5FF; border: 5px solid blue;",
tags$label("We need to go deeper")
),
div(
class = "subsubarea-2",
style = "background: #72E7E8; border: 5px solid blue;"
),
gridPanel(
class = "subsubarea-3",
style = "background: #8AFFB1; border: 5px solid blue;",
rows = "repeat(4, 1fr)",
div(style = "background: #8AFF91; border: 3px solid green;"),
div(style = "background: #8AFF81; border: 3px solid green;"),
div(style = "background: #8AFF71; border: 3px solid green;"),
gridPanel(
style = "background: #8AFF61; border: 3px solid green;",
columns = "1fr 1fr 1fr",
div(style = "background: #8A1F91; border: 2px solid yellow;"),
div(style = "background: #8A2F81; border: 2px solid yellow;"),
div(style = "background: #8A3F71; border: 2px solid yellow;")
)
)
)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
golem::document_and_reload(); SeaCloneR::run_app()
runApp('R')
runApp('R')
shiny::runApp('R')
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
getwd()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
golem::document_and_reload(); SeaCloneR::run_app()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
months()
icon("landmark")
runApp('R')
runApp('R')
runApp('R')
